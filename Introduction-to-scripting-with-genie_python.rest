Introduction
============

Welcome to this introductory course on ``genie_python``, a Python module that enables instrument control using Genie commands with Python. Once you have completed this course, you will be able to do the following using ``genie_python``

- Start and stop runs
- Get and set block information
- Update experiment details
- Create specialised instrument and user scripts scripts
- Convert ``OpenGENIE`` scripts to ``genie_python``

At each stage the course aims to assist learning with exercises and worked examples.

If you're looking for specific answers, please refer to the course contents below. Otherwise, let's `get started`__!

Internal crossreferences, like example_.
.. _example:

This is an example crossreference target.

__ GettingStarted_

Contents
========

We expect that most people will take this course in a linear fashion, but if you have a specific query, the course is broadly split up into the following topics

- Getting started
- Common ``genie_python`` commands
- Scripting
- Converting between ``OpenGENIE`` and ``genie_python``


Starting a scripting session
============================

The best way to run ``genie_python`` commands is from the scripting perspective of the Ibex client.

To open a scripting window:

1. Start the Ibex client
2. Open the scripting perspective

::
    IMAGE: OpenTheScriptingPerspective

3. From here, you can start entering Python code. It will be executed line by line as you enter it.

**Exercise 1**
--------------
- Open a scripting window in Ibex
- Output "Hello, world!" to the console
- Calculate and output the square of all the integers between 1 and 10

You can also open a scripting terminal by running ``C:\Instrument\Apps\Python\genie_python.bat``. This will not provide some advanced features such as auto-complete though, and is recommended for advanced users only.

Accessing ``genie_python`` commands
===================================

Where Ibex has been installed correctly on your machine, ``genie_python`` commands can be accessed via the ``g`` namespace. Try entering ``g.get_version()``.

You should have noticed when you typed ``g.`` that an autocomplete window appeared:

::
    IMAGE: AutoCompleteWindowBasic

The window lists the available commands, and the arguments they take in brackets. You also notice that a description of the highlighted functions and its arguments is also given.

Instrument control
------------------

Instrument control commands let you switch between experimental states. The most common commands are:

- ``begin``: Begins a new run
- ``pause``: Pauses the current run
- ``resume``: Resumes the current run
- ``end``: Ends the current run
- ``abort``: Aborts the current run

Each of the commands above accepts an optional ``boolean`` parameter. Setting it to ``True`` (e.g. ``g.begin(True)``) will give extra output from the DAE.

At each point you can get the state of the run as a string using the command:

- ``get_runstate``: Gets the states of the current run

**NOTE**: Switching run state is not guaranteed. Executing "g.begin()" could lead to a number of run states (e.g. running, waiting, vetoed, setup). It's a good idea to put checks into your scripts that you've reached the expected state before continuing.

You can update and store DAE results using:

- ``update``: Load the data from the DAE into memory
- ``store``: Write the updated DAE information to disk
- ``updatestore``: Load the data from the DAE into memory and store it to disk

As an example, the following script will begin and run, then stop it once it reaches a running state:

::
    import time
    if g.get_runstate=="SETUP"
        g.begin()
        for i in range(60):
            if g.get_runstate()=="RUNNING":
                g.end()
                break
            time.sleep(1)
        else:
            "Could not reach a running state"



Blocks
------

- ``get_blocks``: Gets a list of the currently available blocks
- ``cshow``:
    - Given the name of the block (e.g. `g.chsow("MY_BLOCK")`) it will give a string output of the current settings for that block (e.g. ``MY_BLOCK = 10 (runcontrol = NO, lowlimit = 0.0, highlimit = 0.0)``)
    - If called without arguments, it will show the same information for all blocks, with each block on a new line
- ``cget``: 
    - Returns settings for a named block as a dictionary of values (e.g. ``MY_BLOCK = 10 (runcontrol = NO, lowlimit = 0.0, highlimit = 0.0)``)
    - Unlike ``cshow``, a block name must be specified``
    - Properties can be accessed as standard Python:

::
    block_info = g.cget("MY_BLOCK")
    name = block_info("name")
    value = block_info("value")
    print "The value of block {0} is {1}".format(name, value)

- ``cset``
    - Sets the value for a particular block
    - Assumes that either a setpoint exists for the underlying value or the block itself points at a setpoint
    - Can be called with block names as named arguments. This is useful for setting multiple blocks
        - Example: ``g.cset(MY_BLOCK=1, MY_OTHER_BLOCK=2)``
    - The block can also be passed in by name. This is useful when setting advanced block properties:
        - Example: ``g.cset("MY_BLOCK", lowlimit=1, highlimit=10, runcontrol=True)``
    

Run control
-----------

Experiment setup
----------------

**Exercise 2**
--------------
- This exercise requires the following pre-requisites. These should be satisfied if you are following this as part of the Ibex-run training course:
    - You have permission to begin and end runs on the instrument you're using.
    - The instrument your using has been configured so it can successfully enter a running state
    - You have a settable block called "MY_BLOCK"
- Change the title of the run to "Exercise 2"
- Begin a new run
- Pause the run
- Set the value of "MY_BLOCK" to 5, with a high limit of 10, a low limit of 1 and put it under run control
- Resume the run
- Set the value of "MY_BLOCK" to 20
- Confirm (using ``genie_python``) that the instrument has entered a waiting state
- End the run


Creating and running scripts
============================

Instrument scripts
------------------

Create
~~~~~~

Run
~~~

User scripts
------------

Create
~~~~~~

Run
~~~

Open Genie: Compare and contrast
================================

Commands
--------

Arguments
---------

Procedures vs. functions
------------------------

Loops
-----

Exercise notes
==============

Exercise 1
----------
- Open a scripting window in Ibex
    - Should be straightforward if Ibex is correctly installed.
    - Ideally the instrument will appear as ``SETUP``
    - The output when the scripting window opens should look a bit like this:

::
    IMAGE: StandardStartupOutputOnDemo

- Output "Hello, world!" to the console
    - Enter something like ``print "Hello, World!`` and press return
- Calculate and output the square of all the integers between 1 and 10
    - This is best achieved with the following loop:

::
    for i in range(1,11):
        print i*i

    - A **blank line** will indicate to the scripting window that you've finished writing the loop and it can go ahead and execute it