Accessing ``genie_python`` commands
===================================

From an Ibex scripting terminal, ``genie_python`` commands can be accessed via the ``g`` namespace. For example: ``g.get_version()`` 

You should have noticed immediately after you typed ``g.`` that an autocomplete window appeared:

.. image:: AutoCompleteWindowBasic.png

The window lists the available commands, and the arguments they take in brackets. You also notice that a description of the highlighted functions and its arguments is also given. The list will be refined as you type more characters.

Run control
==================

Switch run states
-----------------

``genie_python`` provides commands to switch between various run states:

- ``begin``: Begins a new run
- ``pause``: Pauses the current run
- ``resume``: Resumes the current run
- ``end``: Ends the current run
- ``abort``: Aborts the current run

Each of the commands above accepts an optional ``boolean`` parameter. Setting it to ``True`` (e.g. ``g.begin(True)``) will give extra output from the DAE. The default is non-verbose output. You can get the current state with:

- ``get_runstate``: Gets the states of the current run

**WARNING**: Switching states may not always lead to the assumed state. For example, you may run "g.begin()" and then expect the instrument to be running. It could be, but it could also be waiting, vetoing, or still setup. It's a good idea to put checks into your scripts that you've reached the expected state before continuing.

Waiting for conditions
-----------------------

If you want to wait for a specific event before executing an action, you can use a ``waitfor`` command:

-    ``waitfor``: Waits for the specified condition to be met. This function supports numerous types of wait. For a full list see [[the genie_python reference manual|http://shadow.nd.rl.ac.uk/genie_python/sphinx/genie_python.html]].

     - Example: ``g.waitfor(seconds=10)``. Wait for 10 seconds
     - Example: ``g.waitfor(minutes=10)``. Wait for 10 minutes
     - Example: ``g.waitfor(uamps=10)``. Wait for the total received current to reach 10 uamps
     - Example: ``g.waitfor(uamps=10, maxwait=10)``. Wait for the total received current to reach 10 uamps, but wait no more than 10 seconds
     - Example: ``g.waitfor(block="MY_BLOCK", lowlimit=10)``. Wait for the block "MY_BLOCK" to be greater than or equal to 10

Many ``waitfor`` arguments also have a standalone function, so as to retain equivalence with OpenGENIE. Again, this list is only a subset of the available functions:

-     ``waitfor_block``: Wait for a block value to be in a certain range
-     ``waitfor_frames``: Wait until the number of good frames reaches a certain value

One special ``waitfor`` function is:

- ``waitfor_move``: Waits for all motors, or a specific motor to finish moving

Update and store
------------------

You can update and store DAE results using:

- ``update``: Load the data from the DAE into memory
- ``store``: Write the updated DAE information to disk
- ``updatestore``: Load the data from the DAE into memory and store it to disk

Worked example: Try it yourself!
--------------------------------

The following script will begin and run, then stop it once it reaches a running state::

    # Only start if we're in the correct state
    if g.get_runstate=="SETUP"
        g.begin()

        maximum_retries = 60
        for i in range(maximum_retries):
            if g.get_runstate()=="RUNNING":

                # A function that does the sequence of operations associated with the run
                do_experimental_stuff()

                # We're done, exit the loop
                break

            else:
                # Wait for a second before checking again
                g.waitfor(seconds=1)
        else:
            "Could not reach a running state"



Blocks
========

-    ``get_blocks``: Gets a list of the currently available blocks
-    ``cshow``: Shows the properties of a named block/all blocks

     -    If given a name (e.g. ``MY_BLOCK``) it will return a string containing properties of the block 

          - Example: ``MY_BLOCK = 10 (runcontrol = NO, lowlimit = 0.0, highlimit = 0.0)``

     - If called without arguments, it will show the same information for all blocks, with each block on a new line

-    ``cget``: Gets properties of a named block as a dictionary of values

     - Example: ``MY_BLOCK = 10 (runcontrol = NO, lowlimit = 0.0, highlimit = 0.0)``
     - Unlike ``cshow``, a block name must be specified
     - Properties can be accessed as standard Python::

          block_info = g.cget("MY_BLOCK")
          name = block_info("name")
          value = block_info("value")
          print "The value of block {0} is {1}".format(name, value)

-    ``cset``: Sets the value for a particular block

     - Assumes that either a setpoint exists for the underlying value or the block itself points at a setpoint
     -   Can be called with block names as named arguments. This is useful for setting multiple blocks 

         - Example: ``g.cset(MY_BLOCK=1, MY_OTHER_BLOCK=2)``

     -    The block can also be passed in by name. This is useful when setting advanced block properties

          - Example: ``g.cset("MY_BLOCK", lowlimit=1, highlimit=10, runcontrol=True)``


Worked example: Try it yourself!
--------------------------------

The following script scans a block between its upper and lower limit::

    # Set some parameters
    max_steps = 100
    high_limit = 10
    low_limit = 1
    block = "MY_BLOCK"
    abs_step_size = 1

    # Set the initial conditions
    g.cset(block, lowlimit = low_limit, highlimit = high_limit)
    step_size = abs_step_size

    # Run the scan
    for i in range(max_steps)
        block_properties = g.cget(block)
        current_value = block_properties['value']

        # Block at or below low limit: Set step positive
        if current_value <= block_properties['lowlimit']:
            step_size = abs_step_size

        # Block at or below high limit: Set step negative
        if current_value  >= block_properties['highlimit']:
            step_size = -abs_step_size

        g.cset(block=current_value + step_size)
        g.waitfor(seconds=0.1)

Experiment setup
----------------

You can change various elements of the experiment setup using ``genie_python``. For example:

- ``change_tcb``: Change the time channel binning
- ``change_tables``: Change the wiring, spectra and detector table locations
- ``change_monitor``: Change the monitor to a specified spectrum and range

If used on their own, these methods will apply their changes immediately. If you want to apply several changes at once you can use the following commands:

- ``change_start``: Marks the start of a change
- ``change_finish``: Marks that the current set of changes is complete. All changes recorded since ``g.change_start()`` will be applied

Experiment details
------------------

You can change various experiment details with the ``change`` command. As with the ``waitfor`` command, it supports many options and allows for multiple details to be changed in a single command:

-    ``change``: Modify experiment details
     
     - Example: ``g.change(title="New title")``
     - Example: ``g.change(user="Adrian and John")``
     - Example: ``g.change(rb=10)``     
     - Example: ``g.change(title="New title", user="Adrian and John")``

As with ``waitfor``, there are also standalone commands for these properties, as well as others:

- ``change_user``: Change the current user
- ``change_title``: Change the current title
- ``change_rb``: Change the current RB number

This is just a sample of the methods available. 


**Exercise 2**
--------------
-    This exercise requires the following pre-requisites. These should be satisfied if you are following this as part of the Ibex-run training course
 
     - You have permission to begin and end runs on the instrument you're using.
     - The instrument your using has been configured so it can successfully enter a running state
     - You have a settable block called "MY_BLOCK"

- Change the title of the run to "Exercise 2"
- Begin a new run
- Pause the run
- Set the value of "MY_BLOCK" to 5, with a high limit of 10, a low limit of 1 and put it under run control
- Resume the run
- Set the value of "MY_BLOCK" to 20
- Confirm (using ``genie_python``) that the instrument has entered a waiting state
- End the run

-------------------------------------------------------------------------------

**Next**: [[Common commands|Ibex-and-genie_python:-Scripting]]

**Previous**: [[Getting started|Ibex-and-genie_python:-Getting-started]]
    
