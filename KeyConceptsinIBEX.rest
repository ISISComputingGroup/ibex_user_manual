Key Concepts in IBEX
====================

It is worth taking a few moments to appreciate some of the key concepts behind IBEX.

Clients & Servers
-----------------

A client-server system is one that employs a distributed application architecture.  In a client-server system the workload is partitioned between the providers of information or services (i.e. servers) and requesters or consumers of information or services (i.e. clients).  Clients request information or the use of a resource or service from one or more server hosts.  Each server host runs one or more server programs which share information or resource with clients when requested to do so.  Typically, the server and client run on separate computers connected via a network, but the client and server can also run as separate processes on same computer.

The design of IBEX follows this model.  IBEX consists of a server component, which runs on the instrument control PC, and a client component, which runs on a separate PC (but can also run on the instrument control PC, if necessary).  IBEX has been created using the `EPICS <http://www.aps.anl.gov/epics/>`_ framework for creating distributed control systems.

IBEX Server
~~~~~~~~~~~

The IBEX server is not a single component, but a collection of components, which together control the individual devices which comprise a neutron or muon instrument.  The primary components of the IBEX server are:

IBEX Client
~~~~~~~~~~~

The IBEX Client is a single application, which functions as a GUI for IBEX.

genie_python
~~~~~~~~~~~~
genie_python can also be thought of as a client of IBEX server.  It operates as a scripting client, requesting information from the IBEX server and sending requests to change the state of devices attached to the instrument control PC.

Blocks & Process Variables
--------------------------

[[ProcessVariables]]

[[Blocks]]



